== Welcome NeoQuotes

NeoQuotes is a demo/template web-application using Neo4j, Spring Data, 
SpringFramework, JRuby, Java, Sinatra, VoiceXML, and many other
technologies that are great to work with. 

== Description of Contents

The default directory structure of NeoQuotes application:

  |-- app
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- shared
  |       `-- voice
  |           `-- grammars
  |-- config
  |   |-- environments
  |   `-- initializers
  |-- docs
  |-- public
  |   |-- img
  |   |-- javascripts
  |   `-- stylesheets
  |-- script
  |-- src
  |   `-- main
  |       `-- java
  |       `-- resources
  |       `-- webapp
  |   `-- test
  |       `-- java
  |       `-- resources
  |-- target
  |-- test
  |   `-- unit
  `-- vendor
      `-- bundle

app
  Holds all the Ruby code that's specific to this particular application.

app/views
  Holds erb views.

app/shared
  Holds common parts between views.

app/voice
  Holds VoiceXML interfaces.

app/voice/grammars
  Holds VoiceXML grammars.

config
  Configuration files for the Sinatra environment, initializers,
  and other dependencies.

docs
  This directory is where your application documentation should be stored.

public
  The directory available for the web server. Also contains the dispatchers 
  and the default HTML files. This should be set as the DOCUMENT_ROOT of 
  your web server.

script
  Helper scripts for automation and generation.

src/main/java
  Holds all the Java code that's specific to this particular application.

src/main/resources
  Holds all needed resources related to Java code and frameworks of this 
  particular application.

src/main/webapp
  Holds web.xml and config.ru needed to bootstrap the web application.

src/test/main
  Unit, functional and integration tests. Implemented using Java language 
  and libraries that you know and love.

src/test/resources
  Holds all needed resouces related to testing execution.

target
  Holds all files generated or downloaded by Maven build tool.

test
  Unit, functional and integration tests. Implemented using Ruby language 
  and libraries that you know and love.

vendor
  External libraries that the application depends on. Also includes the gems
  defined in Jemfile under vendor/bundle/. This location is imposed by Heroku.